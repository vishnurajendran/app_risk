package game;

import common.*;
import entity.Player;
import entity.PlayerHandler;

/**
 * @author Soham
 */
public class DeployHandler implements ISubApplication{
    GameEngine d_gameEngine;

    DeployHandler(GameEngine p_gameEngine){
        d_gameEngine = p_gameEngine;
    }

    public static void DeployArmies(Command p_command){
            int canIssueOrder = PlayerHandler.issueOrder(p_command);
            Logger.log(String.valueOf(canIssueOrder));
            if (canIssueOrder == PlayerHandler.ISSUEORDER_SUCCESS) {
                int l_availableReinforcements;
                // runs a loop through all the players to check if they have armies left
                for (int i = 0; i < PlayerHandler.getGamePlayers().size(); i++) {
                    Player l_currentPlayer = PlayerHandler.getGamePlayers().get(PlayerHandler.getPlayerTurn() % PlayerHandler.getGamePlayers().size());
                    l_availableReinforcements = l_currentPlayer.getAvailableReinforcements();
                    // once it finds a player with armies>0, it stops and lets the player deploy
                    if (l_availableReinforcements != 0) {
                        System.out.println(l_currentPlayer.getPlayerName()
                                + "'s turn, Reinforcements left: " + l_availableReinforcements);
                        PlayerHandler.displayGamePlayersCountries(l_currentPlayer);
                        return;
                    } else {
                        PlayerHandler.increasePlayerTurn(1);
                    }
                }
                // When everyone has depleted their armies, it executes all the orders
                System.out.println("Everyone deployed their reinforcements");
                executeOrders();
                PlayerHandler.reassignValuesForNextTurn();
            } else {
                System.out.println(GameCommands.DEPLOYERRORMESSAGE.get(canIssueOrder - 1));
        }
    }

    /**
     * This method executes all the orders
     * in a round-robin fashion as they were generated by the user
     */
    public static void executeOrders() {
        int l_index = 0;
        Order orderToExecute = PlayerHandler.getGamePlayers().get(0).nextOrder();
        do {
            orderToExecute.executeOrder();
            Logger.log("Executing order for: " + PlayerHandler.getGamePlayers().get(l_index % PlayerHandler.getGamePlayers().size()).getPlayerName() + ", Orders remaining: " + PlayerHandler.getGamePlayers().get(l_index % PlayerHandler.getGamePlayers().size()).getOrderSize());
            l_index = (l_index + 1) % PlayerHandler.getGamePlayers().size();
            for (int i = 0; i < PlayerHandler.getGamePlayers().size(); i++) {
                orderToExecute = PlayerHandler.getGamePlayers().get(l_index % PlayerHandler.getGamePlayers().size()).nextOrder();
                if (orderToExecute == null) {
                    l_index = (l_index + 1) % PlayerHandler.getGamePlayers().size();
                } else {
                    break;
                }
            }

        } while (orderToExecute != null);
    }

    @Override
    public void initialise() {

    }

    @Override
    public boolean hasQuit() {
        return false;
    }

    @Override
    public boolean canProcess(String p_cmdName) {
        return false;
    }

    @Override
    public void submitCommand(Command p_command) {

    }

    @Override
    public void shutdown() {

    }
}
